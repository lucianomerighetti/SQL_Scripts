SET SERVEROUTPUT ON SIZE UNLIMITED

DECLARE

  P_TABLE VARCHAR2(4000) := 'REG_RECEIVABLE_UNIT'; -- NOME DA TABELA DA OPERACAO
  P_TSDDEST VARCHAR2(4000) := 'TSDSETTLEMENTCONTRACT02'; -- TABLESPACE DE DADOS DESTINO
  P_TSIDEST VARCHAR2(4000) := 'TSISETTLEMENTCONTRACT02'; -- TABLESPACE DE INDICE DESTINO
  P_TSLDEST VARCHAR2(4000) := ''; -- TABLESPACE DE LOB DESTINO   
  P_TP_OP   CHAR(1) := ''; -- 'M' = MOVE / 'E' = EXPURGO
  P_PARALLEL  NUMBER(2) := 48; -- VALOR DO PARALELISMO
  P_ONLINE  CHAR(1) := 'S'; -- SE FOR UMA ATIVIDADE ONLINE, COLOQUE 'S', SE NAO, 'N'
  P_COMPRESS CHAR(1) := 'S'; -- SE TIVER COMPRESSAO COLOQUE 'S', SE NAO, 'N' 
  P_UPDATE_INDEX CHAR(1) := 'N'; -- SE TIVER UPDATE INDEX COLOQUE 'S', SE NAO, 'N' 
  
  V_OWNER VARCHAR2(100) := SUBSTR(SYS_CONTEXT('USERENV','DB_NAME'),4,50)||'_ADM';
  V_VERIF_PART VARCHAR2(5) := ''; 
  V_INCOMING    VARCHAR2(32767);
  V_RETURN_HOLD VARCHAR2(4000);
  V_DDL1 VARCHAR2(4000);
  V_DDL2 VARCHAR2(4000);
  V_DDL3 VARCHAR2(4000);  
  V_PARAMS VARCHAR2(4000);

CURSOR C_TABLES IS
  SELECT T.OWNER  AS TABLE_OWNER	
  	    ,T.TABLE_NAME
        ,T.TABLESPACE_NAME
        ,T.PARTITIONED		
        ,ROUND(NVL(S.BYTES,0)/1024/1024,2) SIZE_MB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024,2) SIZE_GB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024/1024,2) SIZE_TB	
  FROM DBA_TABLES T
  LEFT JOIN DBA_SEGMENTS S		
  ON S.OWNER = T.OWNER 		
  AND S.SEGMENT_NAME = T.TABLE_NAME		
  WHERE T.OWNER = V_OWNER
  AND T.TABLE_NAME = P_TABLE;
  
CURSOR C_INDEX (P_OWNER VARCHAR, P_TABLE_NAME VARCHAR) IS
  SELECT I.OWNER AS INDEX_OWNER
        ,I.INDEX_NAME
        ,I.TABLE_OWNER
  	    ,I.TABLE_NAME
        ,I.TABLESPACE_NAME
        ,I.PARTITIONED
        ,ROUND(NVL(S.BYTES,0)/1024/1024,2) SIZE_MB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024,2) SIZE_GB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024/1024,2) SIZE_TB	
  FROM DBA_INDEXES I
  LEFT JOIN DBA_SEGMENTS S		
  ON S.OWNER = I.OWNER 		
  AND S.SEGMENT_NAME = I.INDEX_NAME		
  WHERE I.OWNER = V_OWNER
  AND I.TABLE_NAME = P_TABLE
  ORDER BY I.PARTITIONED DESC;

CURSOR C_DIST_INDEX (P_OWNER VARCHAR, P_TABLE_NAME VARCHAR) IS
  SELECT I.OWNER AS INDEX_OWNER
        ,I.INDEX_NAME
        ,I.TABLE_OWNER
  	    ,I.TABLE_NAME
        ,I.TABLESPACE_NAME
        ,I.PARTITIONED
		,ROUND(NVL(SUM(S.BYTES),0)/1024/1024,2) SIZE_MB		
        ,ROUND(NVL(SUM(S.BYTES),0)/1024/1024/1024,2) SIZE_GB		
        ,ROUND(NVL(SUM(S.BYTES),0)/1024/1024/1024/1024,2) SIZE_TB	
  FROM DBA_INDEXES I
  LEFT JOIN DBA_SEGMENTS S		
  ON S.OWNER = I.OWNER 		
  AND S.SEGMENT_NAME = I.INDEX_NAME		
  WHERE I.OWNER = V_OWNER
  AND I.TABLE_NAME = P_TABLE
  GROUP BY I.OWNER
          ,I.INDEX_NAME
          ,I.TABLE_OWNER
  	      ,I.TABLE_NAME
          ,I.TABLESPACE_NAME
          ,I.PARTITIONED
  ORDER BY I.PARTITIONED DESC;
    
CURSOR C_TAB_PARTS (P_OWNER VARCHAR, P_TABLE_NAME VARCHAR)IS
  SELECT TP.TABLE_OWNER	
  	    ,TP.TABLE_NAME
  	    ,TP.PARTITION_NAME
        ,TP.TABLESPACE_NAME
        ,TP.HIGH_VALUE
        ,ROUND(NVL(S.BYTES,0)/1024/1024,2) SIZE_MB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024,2) SIZE_GB		
        ,ROUND(NVL(S.BYTES,0)/1024/1024/1024/1024,2) SIZE_TB	
  FROM DBA_TAB_PARTITIONS TP	    
  LEFT JOIN DBA_SEGMENTS S		
  ON S.OWNER = TP.TABLE_OWNER 		
  AND S.SEGMENT_NAME = TP.TABLE_NAME		
  AND S.PARTITION_NAME = TP.PARTITION_NAME		
  WHERE TP.TABLE_OWNER = P_OWNER
  AND TP.TABLE_NAME = P_TABLE
  ORDER BY TP.PARTITION_POSITION;
	
CURSOR C_IND_PARTS (P_OWNER VARCHAR, P_TABLE_NAME VARCHAR, P_PARTITION_NAME VARCHAR) IS	
   SELECT  IP.INDEX_OWNER	
          ,IP.INDEX_NAME
          ,TP.PARTITION_POSITION          
		  ,TP.PARTITION_NAME
          ,IP.TABLESPACE_NAME
          ,TP.HIGH_VALUE
          ,ROUND(NVL(S.BYTES,0)/1024/1024,2) SIZE_MB		
          ,ROUND(NVL(S.BYTES,0)/1024/1024/1024,2) SIZE_GB		
          ,ROUND(NVL(S.BYTES,0)/1024/1024/1024/1024,2) SIZE_TB	
	FROM DBA_TAB_PARTITIONS TP	    
    INNER JOIN DBA_IND_PARTITIONS IP
    ON TP.TABLE_OWNER = IP.INDEX_OWNER
    AND TP.PARTITION_NAME = IP.PARTITION_NAME
    INNER JOIN DBA_SEGMENTS S		
    ON S.OWNER = TP.TABLE_OWNER 		
    AND S.SEGMENT_NAME = TP.TABLE_NAME		
    AND S.PARTITION_NAME = TP.PARTITION_NAME		
	WHERE TP.TABLE_OWNER = P_OWNER
	AND TP.TABLE_NAME = P_TABLE_NAME
	AND TP.PARTITION_NAME = P_PARTITION_NAME    
    ORDER BY TP.PARTITION_POSITION,IP.INDEX_NAME;

BEGIN 
  
  V_VERIF_PART := ''; 
  V_INCOMING   := ''; 
  V_RETURN_HOLD := ''; 
  V_DDL1 := ''; 
  V_DDL2 := ''; 
  V_DDL3 := '';   
  V_PARAMS := ''; 
  
  
  IF P_COMPRESS = 'S' THEN
    V_PARAMS := ' ROW STORE COMPRESS ADVANCED';
  END IF;
  
  IF P_PARALLEL IS NOT NULL THEN
    V_PARAMS := V_PARAMS||' PARALLEL '||TO_CHAR(P_PARALLEL);  
  END IF;  
  
  IF P_ONLINE = 'S' THEN
    V_PARAMS := V_PARAMS||' ONLINE';
  END IF;
  
  IF V_PARAMS IS NOT NULL THEN
    V_PARAMS := V_PARAMS||';'; 
  END IF;
  
  FOR R1 IN C_TABLES LOOP  
  
    IF R1.PARTITIONED = 'YES' THEN
	
	  FOR R2 IN C_TAB_PARTS(R1.TABLE_OWNER,R1.TABLE_NAME) LOOP
	
        SELECT HIGH_VALUE 
        INTO V_INCOMING 
        FROM ALL_TAB_PARTITIONS
        WHERE TABLE_OWNER = R2.TABLE_OWNER
          AND TABLE_NAME = R2.TABLE_NAME
          AND PARTITION_NAME = R2.PARTITION_NAME;
          
        V_RETURN_HOLD := SUBSTR(V_INCOMING,1,4000);
	    
        V_DDL1 := '-- '||R2.TABLE_NAME||' -- '||R2.PARTITION_NAME||' -- '||V_RETURN_HOLD||' -- '||R2.SIZE_GB||' GB '||CHR(10)||'ALTER TABLE '|| R2.TABLE_OWNER||'.'||R2.TABLE_NAME||' MOVE PARTITION '||R2.PARTITION_NAME||' TABLESPACE '||NVL(P_TSDDEST,R1.TABLESPACE_NAME)||V_PARAMS;
	    
        DBMS_OUTPUT.PUT_LINE(V_DDL1);	
	    
        FOR R3 IN C_IND_PARTS(R2.TABLE_OWNER,R2.TABLE_NAME,R2.PARTITION_NAME) LOOP
	    
          V_DDL2 := '-- '||R3.INDEX_NAME||' -- '||R3.PARTITION_NAME||' -- '||R3.SIZE_GB||' GB '||CHR(10)||'ALTER INDEX '||R3.INDEX_OWNER||'.'||R3.INDEX_NAME||' REBUILD PARTITION '||R3.PARTITION_NAME||' TABLESPACE '||NVL(P_TSDDEST,R3.TABLESPACE_NAME)||V_PARAMS;
  	    
          DBMS_OUTPUT.PUT_LINE(V_DDL2);	 
	    
        END LOOP;	  
	
	  END LOOP;
	
	  FOR R4 IN C_DIST_INDEX(R1.TABLE_OWNER,R1.TABLE_NAME) LOOP
	  
        IF R4.PARTITIONED = 'NO' THEN
   	 
          V_DDL2 :=  '-- '||R4.INDEX_NAME||' -- '||R4.SIZE_GB||' GB '||CHR(10)||'ALTER INDEX '||R4.INDEX_OWNER||'.'||R4.INDEX_NAME||' REBUILD TABLESPACE '||NVL(P_TSIDEST,R4.TABLESPACE_NAME)||V_PARAMS;
   	   
          DBMS_OUTPUT.PUT_LINE(V_DDL2);	  
  	  
  	    END IF;  

	    IF P_PARALLEL IS NOT NULL THEN
          V_DDL3 := 'ALTER INDEX '||R4.INDEX_OWNER||'.'||R4.INDEX_NAME||' NOPARALLEL;';
        END IF;  
   
        DBMS_OUTPUT.PUT_LINE(V_DDL3);	

      END LOOP;		
  	   
    ELSE
  
	  V_DDL1 := '-- '||R1.TABLE_NAME||' -- '||R1.SIZE_GB||' GB '||CHR(10)||'ALTER TABLE '|| R1.TABLE_OWNER||'.'||R1.TABLE_NAME||' MOVE TABLESPACE '||NVL(P_TSDDEST,R1.TABLESPACE_NAME)||V_PARAMS;
   
      DBMS_OUTPUT.PUT_LINE(V_DDL1);	

      FOR R5 IN C_INDEX(R1.TABLE_OWNER,R1.TABLE_NAME) LOOP
  	 
        V_DDL2 :=  '-- '||R5.INDEX_NAME||' -- '||R5.SIZE_GB||' GB '||CHR(10)||'ALTER INDEX '||R5.INDEX_OWNER||'.'||R5.INDEX_NAME||' REBUILD TABLESPACE '||NVL(P_TSIDEST,R5.TABLESPACE_NAME)||V_PARAMS;
  	   
        DBMS_OUTPUT.PUT_LINE(V_DDL2);	  

	    IF P_PARALLEL IS NOT NULL THEN
          V_DDL3 := 'ALTER INDEX '||R5.INDEX_OWNER||'.'||R5.INDEX_NAME||' NOPARALLEL;';
        END IF;  
   
        DBMS_OUTPUT.PUT_LINE(V_DDL3);
		
	  END LOOP;	
	
    END IF;	
	  
    IF P_PARALLEL IS NOT NULL THEN
      DBMS_OUTPUT.PUT_LINE(' ');		
      DBMS_OUTPUT.PUT_LINE(' ');				
      V_DDL3 := 'ALTER TABLE '||R1.TABLE_OWNER||'.'||R1.TABLE_NAME||' NOPARALLEL;';
    END IF;  
	   
    DBMS_OUTPUT.PUT_LINE(V_DDL3);		  
  
  END LOOP;
    
END;
/  